package bootstrapper;

/**
 * The required properties located within the properties file
 */
public enum RequiredProperties
{
    DiscordToken("Error, missing token required to access the discord services",
            "Token is generated by making a discord bot:",
            "https://discordapp.com/developers/applications/me"),

    Prefix("Error, missing prefix required to execute commands",
            "Prefix to recognise commands example: '!' for \"!help\""),

    VoiceCreateCategory("Error, missing category name where voice channels will be created",
            "Category where user-created channels should be located",
            "if you type {disable} here, this will disable this feature"),

    Playing("Warning, missing playing status, bot is not playing anything",
            "Message of what the bot is currently playing"),

    Welcome("Warning, missing welcome message",
            "Bot will not show any kind of welcome message",
            "Welcome message when someone joins the server",
            "{user} will be swapped with the name of the person who joined",
            "{return} will insert a new line at this position",
            "{owner} will be swapped with the name of the owner of the server",
            "{disable} will disable this feature");

    /**
     * The message shown when the property is missing
     */
    private final String missingMessage;

    /**
     * The message shown which determines what the property is meant for
     */
    private final String comment;

    /**
     * The value of the property
     */
    private String value;

    /**
     * Constructor of required properties
     * @param missingMessage shown when the value of the property is missing
     * @param comment shown above each property and what it is about
     */
    RequiredProperties(String missingMessage, String ... comment)
    {
        this.missingMessage = missingMessage;

        StringBuilder stringBuilder = new StringBuilder();

        for (int i = 0; i < comment.length; i++)
        {
            stringBuilder.append("#").append(comment[i]);
            if (i != comment.length - 1)
            {
                stringBuilder.append(String.format("%n"));
            }
        }

        this.comment = stringBuilder.toString();
    }

    /**
     * Sets the value of the selected property
     * @param value of the property
     */
    public void setValue(String value)
    {
        this.value = value;
    }

    /**
     * Gets the message which should be shown when the property is missing
     * @return a String containing the message
     */
    public String getMissingMessage()
    {
        return missingMessage;
    }

    /**
     * Gets the property as a string for the properties file
     * @return a string containing the property values to be written in a properties file
     */
    public String getPropertyString()
    {
        return value != null
                ? String.format("%s%n%s=%s%n%n", comment, super.toString(), value)
                : String.format("%s%n%s=%n%n", comment, super.toString());
    }
}
